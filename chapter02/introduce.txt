问题场景：商场收银软件（可能涉及正常收费、打折、满减、积分点券等）
方法1.采用简单工厂模式，工厂类负责根据条件生成具体产品类，抽象产品类是从各个具体产品中提取出共同部分作为
基类，这样具体产品就可以继承抽象产品，减少耦合，具体产品类就负责各自的具体逻辑即可。简单工厂模式添加新的
产品时就会需要修改工厂类，违背了“开放封闭原则”，简单工厂模式让客户端需要认识CashSuper和Factory两个类；
方法2.采用策略模式，策略模式是一种定义一系列算法的方法，所有算法完成相同的工作，只是实现不同，可以使用相
同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合，Strategy类定义了所有支持的算法的公共接口，
ConcreteStrategy类封装了具体的算法或行为，继承于STrategy，Context类使用一个ConcreteStrategy对象来配置，
维护一个对Strategy对象的引用。